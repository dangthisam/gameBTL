import socket
import pickle
import threading
import pygame
from pygame import mixer
import sys
import time

from fighter import Fighter

class GameClient:
    def __init__(self, host='localhost', port=5555):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server = host  # Server address
        self.port = port  # Server port
        self.addr = (self.server, self.port)  # Server address tuple
        self.player_id = None  # Player ID (player1 or player2)
        self.game_state = None  # Game state received from server
        self.running = True  # Main game loop flag
        self.connection_established = False  # Connection status flag
        self.connection_error = None  # Connection error message
        self.connection_retry_count = 0  # Number of connection attempts
        self.max_retries = 3  # Maximum number of connection attempts

        # Chat variables
        self.chat_messages = []  # List of messages
        self.chat_input = ""  # Current input message
        self.chat_active = False  # Chat input active state
        self.max_chat_messages = 5  # Maximum number of chat messages to display

        # Chat message display control
        self.show_chat_messages = False  # Control chat messages visibility
        self.chat_display_timer = 0  # Timer for chat messages display
        self.CHAT_DISPLAY_DURATION = 2000  # Duration to display chat messages (in milliseconds)
        
        # Track previous round_over state to detect new rounds
        self.was_round_over = False
        
        # Initialize pygame and mixer
        pygame.init()
        mixer.init()
        
        # Game window setup
        self.SCREEN_WIDTH = 1000
        self.SCREEN_HEIGHT = 600
        self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        pygame.display.set_caption("Brawler Game - Network Edition")
        self.clock = pygame.time.Clock()
        self.FPS = 60
        
        # Colors
        self.RED = (255, 0, 0)
        self.YELLOW = (255, 255, 0)
        self.WHITE = (255, 255, 255)
        self.BLUE = (0, 0, 255)
        self.BLACK = (0, 0, 0)
        self.GREEN = (0, 255, 0)
        self.ORANGE = (255, 165, 0)
        self.PINK = (255, 192, 203)
        
        # Game variables
        self.intro_count = 5  # Countdown for intro
        self.last_count_update = pygame.time.get_ticks()  # Last time count was updated
        self.round_over = False  # Round over flag
        self.ROUND_OVER_COOLDOWN = 2000  # Cooldown time for round over state
        self.game_over = False  # Game over flag
        self.WIN_SCORE = 5  # Score needed to win the game
        self.winner = 0  # Winner ID (1 or 2)
        self.show_controls = True
        self.character_selection = True  # Flag to show character selection screen after controls
        self.player_selection = [0, 0]  # Character selection index for each player (0 = Warrior, 1 = Wizard, etc.)
        
        # Define fighter initial positions early to avoid reference before assignment
        self.fighter_1_initial_x = 200
        self.fighter_1_initial_y = 310
        self.fighter_2_initial_x = 700
        self.fighter_2_initial_y = 310
        
        # Flag to track if fighters have been created
        self.fighters_created = False

        # Network update rate (to prevent flooding the server)
        self.last_update_time = 0
        self.update_interval = 1000 / 30  # 30 updates per second
        
        # CHARACTER_DATA initialization
        self.CHARACTER_DATA = [
            {"name": "WARRIOR", "data": [162, 4, [72, 56]], "sheet": None, "steps": [10, 8, 1, 7, 7, 3, 7], "sound": None, "color": self.RED},
            {"name": "WIZARD", "data": [250, 3, [112, 107]], "sheet": None, "steps": [8, 8, 1, 8, 8, 3, 7], "sound": None, "color": self.BLUE},
            {"name": "HUNTRESS", "data": [250, 3, [112, 107]], "sheet": None, "steps": [8, 8, 1, 7, 7, 3, 7], "sound": None, "color": self.GREEN},
            {"name": "MEDIEVAL WARRIOR", "data": [200, 3, [86, 68]], "sheet": None, "steps": [8, 8, 1, 8, 8, 3, 7], "sound": None, "color": self.ORANGE}
        ]
        
        # Load game resources
        self.load_resources()
        
    def create_fighters(self):
        """Create fighters based on character selection"""
        # Safety check to avoid recreating fighters
        if self.fighters_created:
            return
            
        try:
            print(f"Creating fighters with selections: {self.player_selection}")
            p1_char = self.CHARACTER_DATA[self.player_selection[0]]
            p2_char = self.CHARACTER_DATA[self.player_selection[1]]
            
            # Create fighters with the correct position, data, and attributes
            self.fighter_1 = Fighter(1, self.fighter_1_initial_x, self.fighter_1_initial_y, False,
                                   p1_char["data"], p1_char["sheet"], p1_char["steps"], p1_char["sound"])
            self.fighter_2 = Fighter(2, self.fighter_2_initial_x, self.fighter_2_initial_y, True,
                                   p2_char["data"], p2_char["sheet"], p2_char["steps"], p2_char["sound"])
                                   
            self.fighters_created = True
            print("Fighters created successfully")
        except Exception as e:
            print(f"Error creating fighters: {e}")
        
    def load_resources(self):
        """Load game resources"""
        try:
            # Load music and sounds
            pygame.mixer.music.load("assets/audio/ok.mp3")
            pygame.mixer.music.set_volume(1)
            pygame.mixer.music.play(-1, 0.0, 5000)  # Loop music indefinitely
            
            # Load character sheets and sounds
            self.CHARACTER_DATA[0]["sheet"] = pygame.image.load("assets/images/warrior/Sprites/warrior.png").convert_alpha()
            self.CHARACTER_DATA[0]["sound"] = pygame.mixer.Sound("assets/audio/sword.wav")
            self.CHARACTER_DATA[1]["sheet"] = pygame.image.load("assets/images/wizard/Sprites/wizard.png").convert_alpha()
            self.CHARACTER_DATA[1]["sound"] = pygame.mixer.Sound("assets/audio/magic.wav")
            self.CHARACTER_DATA[2]["sheet"] = pygame.image.load("assets/images/Huntress/Sprites/Huntress.png").convert_alpha()
            self.CHARACTER_DATA[2]["sound"] = pygame.mixer.Sound("assets/audio/sword.wav")
            self.CHARACTER_DATA[3]["sheet"] = pygame.image.load("assets/images/MedievalWarriorPack3/Sprites/MedievalWarriorPack3.png").convert_alpha()
            self.CHARACTER_DATA[3]["sound"] = pygame.mixer.Sound("assets/audio/sword.wav")
            
            # Load background image
            self.bg_image = pygame.image.load("assets/images/background/background.jpg").convert_alpha()
            
            # Load victory image
            self.victory_img = pygame.image.load("assets/images/icons/victory.png").convert_alpha()
            
            # Define fonts
            self.count_font = pygame.font.Font("assets/fonts/Black Magnet.ttf", 80)
            self.score_font = pygame.font.Font("assets/fonts/Black Magnet.ttf", 30)
            self.game_over_font = pygame.font.Font("assets/fonts/Black Magnet.ttf", 50)
            self.controls_font = pygame.font.Font("assets/fonts/Black Magnet.ttf", 25)
            self.title_font = pygame.font.Font("assets/fonts/Black Magnet.ttf", 40)
            
            print("Resources loaded successfully")
        except Exception as e:
            print(f"Error loading resources: {e}")
            pygame.quit()
            sys.exit()
    
    def reset_fighter_state(self, fighter, initial_x, initial_y):
        """Reset a fighter to initial state for a new round"""
        fighter.rect.x = initial_x
        fighter.rect.y = initial_y
        fighter.health = 100
        fighter.alive = True
        fighter.attacking = False
        fighter.attack_type = 0
        fighter.attack_cooldown = 0
        fighter.hit = False
        fighter.action = 0  # Idle action
        fighter.frame_index = 0
        fighter.velocity_y = 0
        fighter.jump = False
        fighter.in_air = False
        fighter.attack_sound_played = False
        
        # Ensure fighter stops attacking
        fighter.update_action(0)  # Set to idle
    
    def connect(self):
        """Connect to the server with retry mechanism"""
        while self.connection_retry_count < self.max_retries and not self.connection_established:
            try:
                print(f"Attempting to connect to server at {self.addr} (Attempt {self.connection_retry_count + 1}/{self.max_retries})")
                
                # Set socket timeout for connection
                self.client.settimeout(5)
                self.client.connect(self.addr)
                
                # Reset timeout to None (blocking mode) for normal operation
                self.client.settimeout(None)
                
                print(f"Connected to server at {self.addr}")
                
                # Receive player ID from server
                data = self.client.recv(4096)
                if not data:
                    raise Exception("No data received from server")
                    
                response = pickle.loads(data)
                
                if "error" in response:
                    raise Exception(f"Server error: {response['error']}")
                
                self.player_id = response["player_id"]
                print(f"You are {self.player_id}")
                
                # Send initial confirmation to server
                self.send_data({"player_id": self.player_id, "status": "connected"})
                
                # Start receiving data from server
                self.connection_established = True
                receive_thread = threading.Thread(target=self.receive_data)
                receive_thread.daemon = True
                receive_thread.start()
                
                # Connection successful
                return True
                
            except Exception as e:
                self.connection_error = str(e)
                print(f"Connection error: {e}")
                self.connection_retry_count += 1
                
                # Close socket and create a new one for retry
                try:
                    self.client.close()
                except:
                    pass
                    
                self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                time.sleep(1)  # Wait before retrying connection
        
        # If we've exhausted our retries
        if not self.connection_established:
            print("Failed to connect to server after multiple attempts")
            return False
    
    def receive_data(self):
        """Continuously receive data from server"""
        self.client.settimeout(5)  # Set timeout to detect disconnection
        
        while self.running:
            try:
                data = self.client.recv(4096)
                if not data:
                    print("Server disconnected (no data)")
                    break
                    
                self.game_state = pickle.loads(data)
                
                # Update local game state based on server data
                if self.game_state and "game_active" in self.game_state:
                    # Check if game is active and selections have been confirmed
                    if self.game_state.get("game_active", False) and self.game_state.get("selections_confirmed", False):
                        # Update player selections if provided by server
                        if "player_selections" in self.game_state:
                            self.player_selection = self.game_state["player_selections"]
                        
                        # Create fighters if not already created
                        if not self.fighters_created:
                            self.create_fighters()
                
                    # Check for chat messages
                    if "chat_messages" in self.game_state:
                        if self.chat_messages != self.game_state["chat_messages"]:
                            self.chat_messages = self.game_state["chat_messages"]
                            self.show_chat_messages = True
                            self.chat_display_timer = pygame.time.get_ticks()
                        
                    # Check for round state changes
                    new_round_over = self.game_state.get("round_over", False)
                    
                    # Detect round transitions (was over, now starting new round)
                    if self.was_round_over and not new_round_over and self.fighters_created:
                        print("New round starting - resetting local fighter state")
                        # Reset local state for controlled fighter
                        if self.player_id == "player1":
                            self.reset_fighter_state(self.fighter_1, self.fighter_1_initial_x, self.fighter_1_initial_y)
                        elif self.player_id == "player2":
                            self.reset_fighter_state(self.fighter_2, self.fighter_2_initial_x, self.fighter_2_initial_y)
                    
                    # Update round state
                    self.was_round_over = new_round_over
                    self.round_over = new_round_over
                    self.game_over = self.game_state.get("game_over", False)
                    self.winner = self.game_state.get("winner", 0)
                    
                    if self.game_state.get("game_active", False) and self.fighters_created:
                        # Update fighter states based on player role
                        if self.player_id == "player1":
                            # For player1: Only update health from server (in case of taking damage)
                            if "player1" in self.game_state:
                                self.fighter_1.health = self.game_state["player1"].get("health", self.fighter_1.health)
                                self.fighter_1.hit = self.game_state["player1"].get("hit", self.fighter_1.hit)
                            
                            # Update entire state of opponent
                            if "player2" in self.game_state:
                                self.fighter_2.rect.x = self.game_state["player2"].get("x", self.fighter_2.rect.x)
                                self.fighter_2.rect.y = self.game_state["player2"].get("y", self.fighter_2.rect.y)
                                self.fighter_2.health = self.game_state["player2"].get("health", self.fighter_2.health)
                                self.fighter_2.action = self.game_state["player2"].get("action", self.fighter_2.action)
                                self.fighter_2.frame_index = self.game_state["player2"].get("frame_index", self.fighter_2.frame_index)
                                self.fighter_2.flip = self.game_state["player2"].get("flip", self.fighter_2.flip)
                                self.fighter_2.attacking = self.game_state["player2"].get("attacking", self.fighter_2.attacking)
                                self.fighter_2.hit = self.game_state["player2"].get("hit", self.fighter_2.hit)
                                
                        elif self.player_id == "player2":
                            # For player2: Only update health from server (in case of taking damage)
                            if "player2" in self.game_state:
                                self.fighter_2.health = self.game_state["player2"].get("health", self.fighter_2.health)
                                self.fighter_2.hit = self.game_state["player2"].get("hit", self.fighter_2.hit)
                            
                            # Update entire state of opponent
                            if "player1" in self.game_state:
                                self.fighter_1.rect.x = self.game_state["player1"].get("x", self.fighter_1.rect.x)
                                self.fighter_1.rect.y = self.game_state["player1"].get("y", self.fighter_1.rect.y)
                                self.fighter_1.health = self.game_state["player1"].get("health", self.fighter_1.health)
                                self.fighter_1.action = self.game_state["player1"].get("action", self.fighter_1.action)
                                self.fighter_1.frame_index = self.game_state["player1"].get("frame_index", self.fighter_1.frame_index)
                                self.fighter_1.flip = self.game_state["player1"].get("flip", self.fighter_1.flip)
                                self.fighter_1.attacking = self.game_state["player1"].get("attacking", self.fighter_1.attacking)
                                self.fighter_1.hit = self.game_state["player1"].get("hit", self.fighter_1.hit)
                
            except socket.timeout:
                # Just retry on timeout
                continue
            except ConnectionResetError:
                print("Connection reset by server")
                break
            except ConnectionAbortedError:
                print("Connection aborted")
                break
            except Exception as e:
                print(f"Error receiving data: {e}")
                break
                
        print("Disconnected from server")
        self.connection_established = False
        self.running = False
        
    def send_data(self, data):
        """Send data to server with error handling"""
        if not self.connection_established:
            return
            
        try:
            serialized_data = pickle.dumps(data)
            self.client.send(serialized_data)
        except ConnectionResetError:
            print("Connection reset by server while sending data")
            self.connection_established = False
            self.running = False
        except Exception as e:
            print(f"Error sending data: {e}")
            self.connection_established = False
            self.running = False
    
    def draw_text(self, text, font, text_col, x, y):
        """Draw text on screen"""
        img = font.render(text, True, text_col)
        text_rect = img.get_rect(center=(x, y))
        self.screen.blit(img, text_rect)

    def draw_character_selection(self):
        """Draw character selection screen"""
        # Draw semi-transparent black background
        s = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        s.set_alpha(220)
        s.fill(self.BLACK)
        self.screen.blit(s, (0, 0))

        # Draw title
        self.draw_text("CHARACTER SELECTION", self.title_font, self.YELLOW, self.SCREEN_WIDTH // 2, 50)

        # Calculate box dimensions and positions
        character_width = 200
        character_height = 250
        spacing = 40
        start_x = (self.SCREEN_WIDTH - (character_width * 4 + spacing * 3)) // 2

        # Draw character boxes
        for i in range(4):
            # Get color from character_data
            box_color = self.CHARACTER_DATA[i]["color"]
            # Draw box
            pygame.draw.rect(self.screen, box_color,
                           (start_x + i * (character_width + spacing), 120, character_width, character_height), 0)
            pygame.draw.rect(self.screen, self.WHITE,
                           (start_x + i * (character_width + spacing), 120, character_width, character_height), 3)

            # Draw character name
            self.draw_text(self.CHARACTER_DATA[i]["name"], self.controls_font, self.WHITE, 
                         start_x + i * (character_width + spacing) + character_width // 2, 140)

            # Mark player selections
            if self.player_selection[0] == i:
                self.draw_text("P1", self.title_font, self.WHITE, 
                             start_x + i * (character_width + spacing) + character_width // 2, 200)
            if self.player_selection[1] == i:
                self.draw_text("P2", self.title_font, self.WHITE, 
                             start_x + i * (character_width + spacing) + character_width // 2, 250)

        # Draw instructions
        self.draw_text("Player 1: 1-4 keys to select", self.controls_font, self.BLUE, self.SCREEN_WIDTH // 2, 400)
        self.draw_text("Player 2: 6-9 keys to select", self.controls_font, self.RED, self.SCREEN_WIDTH // 2, 450)
        self.draw_text("Press ENTER to start fighting", self.controls_font, self.GREEN, self.SCREEN_WIDTH // 2, 500)
            
    def draw_left_aligned_text(self, text, font, text_col, x, y):
        """Draw left-aligned text"""
        img = font.render(text, True, text_col)
        self.screen.blit(img, (x, y))
     
    def draw_bg(self):
        """Draw background"""
        scaled_bg = pygame.transform.scale(self.bg_image, (self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        self.screen.blit(scaled_bg, (0, 0))
    
    def draw_health_bar(self, health, x, y):
        """Draw health bar"""
        ratio = health / 100
        pygame.draw.rect(self.screen, self.WHITE, (x - 2, y - 2, 404, 34))
        pygame.draw.rect(self.screen, self.RED, (x, y, 400, 30))
        pygame.draw.rect(self.screen, self.YELLOW, (x, y, 400 * ratio, 30))
    
    def draw_controls_screen(self):
        """Draw controls screen"""
        # Draw dark translucent background
        s = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        s.set_alpha(220)
        s.fill(self.BLACK) 
        self.screen.blit(s, (0, 0))
        
        # Draw title
        self.draw_text("KEYS TO PLAY", self.title_font, self.YELLOW, self.SCREEN_WIDTH // 2, 50)
        
        # Draw player 1 controls frame
        pygame.draw.rect(self.screen, self.BLUE, (50, 120, 400, 350), 0)
        pygame.draw.rect(self.screen, self.WHITE, (50, 120, 400, 350), 3)
        
        # Draw player 1 controls
        self.draw_left_aligned_text("Player 1 (WARRIOR)", self.controls_font, self.WHITE, 75, 130)
        self.draw_left_aligned_text("Left:         A", self.controls_font, self.WHITE, 75, 180)
        self.draw_left_aligned_text("Right:        D", self.controls_font, self.WHITE, 75, 220)
        self.draw_left_aligned_text("Up:           W", self.controls_font, self.WHITE, 75, 260)
        self.draw_left_aligned_text("Attack 1:     R", self.controls_font, self.WHITE, 75, 300)
        self.draw_left_aligned_text("Attack 2:     T", self.controls_font, self.WHITE, 75, 340)
        self.draw_left_aligned_text("Attack 3:     Y", self.controls_font, self.WHITE, 75, 380)
        
        # Draw player 2 controls frame
        pygame.draw.rect(self.screen, self.RED, (550, 120, 400, 350), 0)
        pygame.draw.rect(self.screen, self.WHITE, (550, 120, 400, 350), 3)
        
        # Draw player 2 controls
        self.draw_left_aligned_text("Player 2 (WIZARD)", self.controls_font, self.WHITE, 575, 130)
        self.draw_left_aligned_text("Left:         <---", self.controls_font, self.WHITE, 575, 180)
        self.draw_left_aligned_text("Right:        --->", self.controls_font, self.WHITE, 575, 220)
        self.draw_left_aligned_text("Up:           |", self.controls_font, self.WHITE, 575, 260)
        self.draw_left_aligned_text("Attack 1:     J", self.controls_font, self.WHITE, 575, 300)
        self.draw_left_aligned_text("Attack 2:     K", self.controls_font, self.WHITE, 575, 340)
        self.draw_left_aligned_text("Attack 3:     L", self.controls_font, self.WHITE, 575, 380)
        
        # Add chat control instructions
        self.draw_left_aligned_text("Chat:         C", self.controls_font, self.GREEN, 75, 420)
        
        # Display start prompt
        self.draw_text("Press Space to continue", self.controls_font, self.GREEN, self.SCREEN_WIDTH // 2, 500)
    
    def waiting_screen(self):
        """Show waiting for other player screen"""
        # Draw dark translucent background
        s = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        s.set_alpha(220)
        s.fill(self.BLACK)
        self.screen.blit(s, (0, 0))
        
        # Draw waiting message
        self.draw_text("WAITING FOR OTHER PLAYER", self.title_font, self.YELLOW, self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 50)
        self.draw_text("Please wait...", self.controls_font, self.WHITE, self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 + 30)
    
    def connection_error_screen(self):
        """Show connection error screen"""
        # Draw dark background
        s = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        s.set_alpha(255)
        s.fill(self.BLACK)
        self.screen.blit(s, (0, 0))
        
        # Draw error message
        self.draw_text("CONNECTION ERROR", self.title_font, self.RED, self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 100)
        self.draw_text(f"Could not connect to server at {self.server}:{self.port}", 
                     self.controls_font, self.WHITE, self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 30)
        
        if self.connection_error:
            # Split error message into multiple lines if needed
            error_lines = [self.connection_error[i:i+50] for i in range(0, len(self.connection_error), 50)]
            for i, line in enumerate(error_lines):
                self.draw_text(line, self.controls_font, self.WHITE, 
                              self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 + 10 + (i * 30))
        
        # Draw retry or exit options
        self.draw_text("Press 'R' to retry or 'ESC' to exit", self.controls_font, 
                     self.YELLOW, self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 + 100)
                     
    def display_game_over_messages(self):
        """Display victory or defeat message based on player ID and winner"""
        if not self.game_state or "winner" not in self.game_state:
            return
            
        winner = self.game_state["winner"]
        
        # Create a semi-transparent overlay
        overlay = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        overlay.set_alpha(180)
        overlay.fill(self.BLACK)
        self.screen.blit(overlay, (0, 0))
        
        # Check if this client is the winner
        if (self.player_id == "player1" and winner == 1) or (self.player_id == "player2" and winner == 2):
            # Display VICTORY for the winner
            self.draw_text("VICTORY", self.game_over_font, self.GREEN, 
                         self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 100)
        else:
            # Display DEFEAT for the loser
            self.draw_text("DEFEAT", self.game_over_font, self.RED, 
                         self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 100)
    
    def display_round_result(self):
        """Display round result"""
        if not self.game_state or "round_over" not in self.game_state or not self.game_state["round_over"]:
            return
    
        # Create a semi-transparent overlay
        overlay = pygame.Surface((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        overlay.set_alpha(180)
        overlay.fill(self.BLACK)
        self.screen.blit(overlay, (0, 0))
    
        # Check which player had health reduced to 0
        if self.game_state["player1"]["health"] <= 0:
            round_winner = 2
        elif self.game_state["player2"]["health"] <= 0:
            round_winner = 1
        else:
            round_winner = 0
            
        # Check if this client is the winner of the round
        if (self.player_id == "player1" and round_winner == 1) or (self.player_id == "player2" and round_winner == 2):
            # Display VICTORY for the round winner
            self.draw_text("ROUND WON", self.game_over_font, self.GREEN, 
                      self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 100)
        else:
            # Display DEFEAT for the round loser
            self.draw_text("ROUND LOST", self.game_over_font, self.RED, 
                      self.SCREEN_WIDTH // 2, self.SCREEN_HEIGHT // 2 - 100)
            
    def process_input(self):
        """Process player input"""
        # Don't process input if:
        # 1. No game state
        # 2. Round is over
        # 3. Intro is still counting down
        # 4. Game is over
        # 5. Fighters not created yet
        if (not self.game_state or 
            not self.fighters_created or
            self.game_state.get("round_over", False) or 
            self.